/*
 * User and Authentication Backend
 *
 * # API for authentication and managing user accounts  This is the API of the service at P7M that manages tenants, accounts and authentication. It is the basis of many services of P7M.  For most endpoints, the caller has to be authenticated with the system and provide a JWT token in the Authorization header of the HTTP request. If your interacting with this API using the Swagger interface, you need to set the JWT token by clicking on the **Authorize** button on the right side of the header. As the value don't forget that the Authorization header starts with the fixed value `Bearer` followed by a space followed by the actual JWT token value.  If anything is unclear or you found a bug in the documentation, please contact <tech@p7m.de>. 
 *
 * The version of the OpenAPI document: 0.11.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PasswordLoginResponse {
    #[serde(rename = "success")]
    pub success: bool,
    #[serde(rename = "jwt", skip_serializing_if = "Option::is_none")]
    pub jwt: Option<String>,
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    #[serde(rename = "realname", skip_serializing_if = "Option::is_none")]
    pub realname: Option<String>,
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(rename = "userType", skip_serializing_if = "Option::is_none")]
    pub user_type: Option<UserType>,
    #[serde(rename = "expiration", skip_serializing_if = "Option::is_none")]
    pub expiration: Option<String>,
    #[serde(rename = "accessibleTenants", skip_serializing_if = "Option::is_none")]
    pub accessible_tenants: Option<Vec<crate::models::Tenant>>,
}

impl PasswordLoginResponse {
    pub fn new(success: bool) -> PasswordLoginResponse {
        PasswordLoginResponse {
            success,
            jwt: None,
            account_id: None,
            realname: None,
            tenant_id: None,
            user_type: None,
            expiration: None,
            accessible_tenants: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UserType {
    #[serde(rename = "USER")]
    USER,
    #[serde(rename = "ADMIN")]
    ADMIN,
    #[serde(rename = "SUPERADMIN")]
    SUPERADMIN,
}

impl Default for UserType {
    fn default() -> UserType {
        Self::USER
    }
}

